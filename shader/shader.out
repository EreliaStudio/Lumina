## LAYOUTS DEFINITION ##
0 Vector3 modelPosition
1 Vector2 modelUVs
2 Vector3 modelNormals


## FRAMEBUFFER DEFINITION ##
0 Color pixelColor


## CONSTANTS DEFINITION ##
CameraConstants_Type CameraConstants 128 128 {
    viewMatrix 0 64 0 64 1 0 {}
    projectionMatrix 64 64 64 64 1 0 {}
}


## ATTRIBUTES DEFINITION ##
modelInformations_Type modelInformations 132 132 {
    modelMatrix 0 64 0 64 1 0 {}
    inverseModelMatrix 64 64 64 64 1 0 {}
    modelMaterial 128 4 128 4 1 0 {
        shininess 0 4 0 4 1 0 {}
    }
}


## TEXTURES DEFINITION ##
diffuseTexture Texture_diffuseTexture
specularTexture Texture_specularTexture


## VERTEX SHADER CODE ##
#version 450

layout (location = 0) in vec3 modelPosition;
layout (location = 1) in vec2 modelUVs;
layout (location = 2) in vec3 modelNormals;
layout (location = 0) out flat int out_instanceID;
layout (location = 1) out vec2 fragmentUVs;
layout (location = 2) out vec3 fragmentNormal;

struct Material
{
    float shininess;
};

layout(attributes) uniform modelInformations_Type
{
    mat4 modelMatrix;
    mat4 inverseModelMatrix;
    Material modelMaterial;
} modelInformations;

layout(constants) uniform CameraConstants_Type
{
    mat4 viewMatrix;
    mat4 projectionMatrix;
} CameraConstants;

uniform sampler2D Texture_diffuseTexture;

uniform sampler2D Texture_specularTexture;

void main()
{
    vec4 worldPosition = modelInformations.modelMatrix * (vec4(modelPosition, 1.0));
    vec4 viewPosition = CameraConstants.viewMatrix * worldPosition;
    gl_Position = (CameraConstants.projectionMatrix * viewPosition);
    fragmentUVs = modelUVs;
    fragmentNormal = (modelInformations.inverseModelMatrix * (vec4(modelNormals, 0)).xyz);
    out_instanceID = gl_InstanceID;
}

## FRAGMENT SHADER CODE ##
#version 450

layout (location = 0) in flat int instanceID;
layout (location = 1) in vec2 fragmentUVs;
layout (location = 2) in vec3 fragmentNormal;
layout (location = 0) out vec4 pixelColor;

struct Material
{
    float shininess;
};

layout(attributes) uniform modelInformations_Type
{
    mat4 modelMatrix;
    mat4 inverseModelMatrix;
    Material modelMaterial;
} modelInformations;

uniform sampler2D Texture_diffuseTexture;

uniform sampler2D Texture_specularTexture;

void main()
{
    vec3 normalizedNormal = normalize(fragmentNormal);
    vec3 lightDirection = normalize(vec3(0.0, -1.0, -1.0));
    vec4 lightColor = vec4(1.0, 1.0, 1.0, 1.0);
    float ambientStrength = 0.1;
    vec4 ambient = ambientStrength * lightColor;
    float diff = max(dot(normalizedNormal, -lightDirection), 0.0);
    vec4 diffuse = diff * lightColor;
    vec3 viewDirection = normalize(vec3(0.0, 0.0, 1.0));
    vec3 reflectDirection = reflect(lightDirection, normalizedNormal);
    vec4 specularMap = texture(Texture_specularTexture, fragmentUVs);
    float specIntensity = specularMap.r;
    float spec = pow(max(dot(viewDirection, reflectDirection), 0.0), modelInformations.modelMaterial.shininess);
    vec4 specular = (specIntensity * spec) * lightColor;
    vec4 finalColor = (ambient + diffuse) + specular;
    vec4 textureColor = texture(Texture_diffuseTexture, fragmentUVs);
    finalColor *= (vec4(textureColor.rgb, 1.0));
    pixelColor = (vec4(finalColor.rgb, textureColor.a));
}

