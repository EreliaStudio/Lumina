Input -> VertexPass : Vector3 modelPosition;
Input -> VertexPass : Vector2 modelUVs;
Input -> VertexPass : Vector3 modelNormals;

VertexPass -> FragmentPass : Vector2 fragmentUVs;
VertexPass -> FragmentPass : Vector3 fragmentNormal;

Texture diffuseTexture;
Texture specularTexture;

AttributeBlock modelInformations
{
    Matrix4x4 modelMatrix;
    Matrix4x4 inverseModelMatrix;
};

ConstantBlock CameraConstants
{
    Matrix4x4 viewMatrix;
    Matrix4x4 projectionMatrix;
};

VertexPass()
{
    Vector4 worldPosition = modelInformations.modelMatrix * Vector4(modelPosition, 1.0);
    Vector4 viewPosition = CameraConstants.viewMatrix * worldPosition;
    pixelPosition = CameraConstants.projectionMatrix * viewPosition;

    fragmentUVs = modelUVs;

    fragmentNormal = (modelInformations.inverseModelMatrix * Vector4(modelNormals, 0)).xyz;
}

FragmentPass()
{
    Vector3 lightDirection = Vector3(0.0, -1.0, 0.0).normalize();

    Vector3 normal = fragmentNormal.normalize();

    float diffuseIntensity = max(dot(normal, -lightDirection), 0.0);

    Vector3 viewDirection = Vector3(0.0, 0.0, 1.0).normalize(); // Assume camera looks down the Z-axis
    Vector3 reflectionDirection = reflect(lightDirection, normal);
    float specularIntensity = pow(max(dot(viewDirection, reflectionDirection), 0.0), 32.0); // shininess = 32

    float ambientIntensity = 0.1;

	Color texColor = diffuseTexture.getPixel(fragmentUVs);
    Color specularColor = specularTexture.getPixel(fragmentUVs);

    Color finalColor = texColor * (ambientIntensity + diffuseIntensity) + specularColor * specularIntensity;

    pixelColor = Color(finalColor.rgb, texColor.a);
}
