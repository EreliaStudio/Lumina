Input -> VertexPass : Vector2 modelPosition;
Input -> VertexPass : Vector2 modelUVs;

VertexPass -> FragmentPass : Vector2 fragmentUVs;

Texture fontTexture;

AttributeBlock textInformations
{
	Color textColor;
	Color outlineColor;
};

VertexPass()
{
	pixelPosition = Vector4(modelPosition, 0, 1.0f);

	fragmentUVs = modelUVs;
}

float computeFormula(float x, float k) {
    return (1.0 - exp(-k * x)) / (1.0 - exp(-k));
}

FragmentPass()
{
    float grayscale = fontTexture.getPixel(fragmentUVs).r;

	if (grayscale == 0)
	{
		discard;
	}

	float outlineToGlyphThreshold = 0.2f;

	if (grayscale <= outlineToGlyphThreshold)
	{
		pixelColor = textInformations.outlineColor;
		pixelColor.a = computeFormula(smoothstep(0, outlineToGlyphThreshold, grayscale), 20);
	}
	else
	{
		float t = computeFormula(smoothstep(outlineToGlyphThreshold, 1.0, grayscale), -20);
		//pixelColor = mix(textInformations.outlineColor, textInformations.textColor, t);
		pixelColor = Color(t, t, t, 1.0f);
		if (t <= 0)
		{
			pixelColor = Color(0, 0, 255, 1);
		}
	}
}