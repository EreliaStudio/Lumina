#include <Material>
#include <DirectionalLight>
#include <CameraConstants>

Input -> VertexPass : Vector3 modelPosition;
Input -> VertexPass : Vector2 modelUVs;
Input -> VertexPass : Vector3 modelNormals;

VertexPass -> FragmentPass : Vector3 fragmentPosition;
VertexPass -> FragmentPass : Vector2 fragmentUVs;
VertexPass -> FragmentPass : Vector3 fragmentNormal;

Texture diffuseTexture;
Texture specularTexture;

ConstantBlock WorldConstants
{
	spk::DirectionalLight directionalLight;
};

AttributeBlock modelInformations
{
    Matrix4x4 modelMatrix;
    Matrix4x4 inverseModelMatrix;

	spk::Material modelMaterial;
};

VertexPass()
{
    Vector4 worldPosition = modelInformations.modelMatrix * Vector4(modelPosition, 1.0);
    Vector4 viewPosition = spk::CameraConstants.view * worldPosition;
    pixelPosition = spk::CameraConstants.projection * viewPosition;

	Vector4 worldNormal = modelInformations.modelMatrix * Vector4(modelNormals, 0);

	fragmentPosition = worldPosition.xyz;
    fragmentUVs = modelUVs;
    fragmentNormal = worldNormal.xyz;
}

FragmentPass()
{
	if (spk::CameraConstants.position == Vector3(0, 0, 1))
	{
		
	}

	if (modelInformations.modelMaterial.shininess == 1.0f)
	{
		
	}

	if (WorldConstants.directionalLight.color == Color(1, 0, 0, 1))
	{
		
	}
}
