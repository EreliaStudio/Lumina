## LAYOUTS DEFINITION ##
0 2 5126

## CONSTANTS DEFINITION ##
Model_modelConstantAttributesType Model::modelConstantAttributes 16 16 {
    solidColor 0 16 0 16 {
        r 0 4 0 4 {}
        g 4 4 4 4 {}
        b 8 4 8 4 {}
        a 12 4 12 4 {}
        rgb 0 12 0 12 {}
        rgba 0 16 0 16 {}
    }
};

## ATTRIBUTES DEFINITION ##
Model_modelAttributesType Model::modelAttributes 53 80 {
    test 0 1 0 1 {}
    solidColor 1 16 16 16 {
        r 0 4 0 4 {}
        g 4 4 4 4 {}
        b 8 4 8 4 {}
        a 12 4 12 4 {}
        rgb 0 12 0 12 {}
        rgba 0 16 0 16 {}
    }
    myStruct 17 36 32 48 {
        padding 0 8 0 8 {}
        padding2 8 12 16 12 {
            x 0 4 0 4 {}
            y 4 4 4 4 {}
            z 8 4 8 4 {}
            xy 0 8 0 8 {}
        }
        validation 20 16 32 16 {
            x 0 4 0 4 {}
            y 4 4 4 4 {}
            z 8 4 8 4 {}
            w 12 4 12 4 {}
            xy 0 8 0 8 {}
            xyz 0 12 0 12 {}
        }
    }
};

## TEXTURES DEFINITION ##
Model::myTexture

## VERTEX SHADER CODE ##
layout(location = 0) in vec2 vertexPosition;

struct Model_MyStruct {
    float padding[2];
    Vector3 padding2;
    Vector4 validation;
};
layout(attribute) uniform Model_modelAttributesType {
    bool test;
    Color solidColor;
    Model_MyStruct myStruct;
} Model_modelAttributes;


layout(constant) uniform Model_modelConstantAttributesType{
    Color solidColor;
} Model_modelConstantAttributes;

Color computeColor(Color p_color){
    return (p_color);
}

void main(){
    pixelPosition = Vector4(vertexPosition, 0.0, 1.0);
}

## FRAGMENT SHADER CODE ##
sampler2D Model_myTexture;
struct Model_MyStruct {
    float padding[2];
    Vector3 padding2;
    Vector4 validation;
};
layout(attribute) uniform Model_modelAttributesType {
    bool test;
    Color solidColor;
    Model_MyStruct myStruct;
} Model_modelAttributes;


layout(constant) uniform Model_modelConstantAttributesType{
    Color solidColor;
} Model_modelConstantAttributes;

Color computeColor(Color p_color){
    return (p_color);
}

void main(){
    if (Model::modelAttributes.test == true)
    {
        pixelColor = Model::computeColor(Model::modelAttributes.solidColor);
    }
    else
    {
        pixelColor = Model::computeColor(Model::modelConstantAttributes.solidColor);
    }
}

