## LAYOUTS DEFINITION ##
0 Vector2 modelPosition
1 Vector2 modelUVs


## FRAMEBUFFER DEFINITION ##
0 Color pixelColor


## CONSTANTS DEFINITION ##


## ATTRIBUTES DEFINITION ##
textInformations_Type textInformations 32 32 {
    textColor 0 16 0 16 1 0 {
        r 0 4 0 4 1 0 {}
        g 4 4 4 4 1 0 {}
        b 8 4 8 4 1 0 {}
        a 12 4 12 4 1 0 {}
    }
    outlineColor 16 16 16 16 1 0 {
        r 0 4 0 4 1 0 {}
        g 4 4 4 4 1 0 {}
        b 8 4 8 4 1 0 {}
        a 12 4 12 4 1 0 {}
    }
}


## TEXTURES DEFINITION ##
fontTexture Texture_fontTexture


## VERTEX SHADER CODE ##
#version 450

layout (location = 0) in vec2 modelPosition;
layout (location = 1) in vec2 modelUVs;
layout (location = 0) out flat int out_instanceID;
layout (location = 1) out vec2 fragmentUVs;

uniform sampler2D Texture_fontTexture;

void main()
{
    (gl_Position) = (vec4(modelPosition, 0, 1.0f));
    (fragmentUVs) = (modelUVs);
    out_instanceID = gl_InstanceID;
}

## FRAGMENT SHADER CODE ##
#version 450

layout (location = 0) in flat int instanceID;
layout (location = 1) in vec2 fragmentUVs;
layout (location = 0) out vec4 pixelColor;

layout(attributes) uniform textInformations_Type
{
    vec4 textColor;
    vec4 outlineColor;
} textInformations;

uniform sampler2D Texture_fontTexture;

float computeFormula(float x, float k)
{
    return ((1.0) - (exp((-k) * (x)))) / ((1.0) - (exp(-k)));
}

void main()
{
    float grayscale = texture(Texture_fontTexture, fragmentUVs).r;
    if ((grayscale) == (0))
    {
        discard;
    }
    float outlineToGlyphThreshold = 0.2f;
    if ((grayscale) <= (outlineToGlyphThreshold))
    {
        (pixelColor) = (textInformations.outlineColor);
        (pixelColor.a) = (computeFormula(smoothstep(0, outlineToGlyphThreshold, grayscale), 20));
    }
    else
    {
        float t = computeFormula(smoothstep(outlineToGlyphThreshold, 1.0, grayscale), -20);
        (pixelColor) = (vec4(t, t, t, 1.0f));
        if ((t) <= (0))
        {
            (pixelColor) = (vec4(0, 0, 255, 1));
        }
    }
}

