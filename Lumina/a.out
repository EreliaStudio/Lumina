## LAYOUTS DEFINITION ##
0 Vector2 modelPosition
1 Vector2 modelUVs


## FRAMEBUFFER DEFINITION ##
0 Color pixelColor


## CONSTANTS DEFINITION ##


## ATTRIBUTES DEFINITION ##
spk_WidgetAttributes_Type spk::WidgetAttributes 4 4 {
    layer 0 4 0 4 1 0 {}
}
textRendererAttribute_Type textRendererAttribute 40 52 {
    textColor 0 16 0 16 1 0 {
        r 0 4 0 4 1 0 {}
        g 4 4 4 4 1 0 {}
        b 8 4 8 4 1 0 {}
        a 12 4 12 4 1 0 {}
    }
    textEdgePower 16 4 16 4 1 0 {}
    outlineColor 20 16 32 16 1 0 {
        r 0 4 0 4 1 0 {}
        g 4 4 4 4 1 0 {}
        b 8 4 8 4 1 0 {}
        a 12 4 12 4 1 0 {}
    }
    outlineEdgePower 36 4 48 4 1 0 {}
}


## TEXTURES DEFINITION ##
fontTexture Texture_fontTexture


## VERTEX SHADER CODE ##
#version 450

layout (location = 0) in vec2 modelPosition;
layout (location = 1) in vec2 modelUVs;
layout (location = 0) out flat int out_instanceID;
layout (location = 1) out vec2 fragmentUVs;

layout(attributes) uniform spk_WidgetAttributes_Type
{
    float layer;
} spk_WidgetAttributes;

uniform sampler2D Texture_fontTexture;

void main()
{
    gl_Position = vec4(modelPosition, spk_WidgetAttributes.layer, 1.0f);
    fragmentUVs = modelUVs;
    out_instanceID = gl_InstanceID;
}

## FRAGMENT SHADER CODE ##
#version 450

layout (location = 0) in flat int instanceID;
layout (location = 1) in vec2 fragmentUVs;
layout (location = 0) out vec4 pixelColor;

layout(attributes) uniform textRendererAttribute_Type
{
    vec4 textColor;
    float textEdgePower;
    vec4 outlineColor;
    float outlineEdgePower;
} textRendererAttribute;

uniform sampler2D Texture_fontTexture;

vec4 Color_lerp(vec4 param0, vec4 param1, float param2)
{
return mix(param0, param1, param2);
}

void main()
{
    float grayscale = texture(Texture_fontTexture, fragmentUVs).r;
    float edgeThresholdLow = 0.4;
    float edgeThresholdHigh = 0.6;
    if (grayscale < edgeThresholdLow)
    {
        pixelColor = textRendererAttribute.outlineColor;
        pixelColor.a = smoothstep(0, edgeThresholdLow, grayscale);
    }    else if (grayscale < edgeThresholdHigh)
    {
        float blendFactor = smoothstep(edgeThresholdLow, edgeThresholdHigh, grayscale);
        pixelColor = Color_lerp(textRendererAttribute.outlineColor, textRendererAttribute.textColor, blendFactor);
    }
    else
    {
        pixelColor = textRendererAttribute.textColor;
        pixelColor.a = smoothstep(edgeThresholdHigh, 1.0f, grayscale);
    }
}

